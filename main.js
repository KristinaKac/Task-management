(()=>{"use strict";class t{constructor(t,e){this.parentEl=t,this.title=e,this.tasks=[],this.onNewCardClick=this.onNewCardClick.bind(this),this.onCloseAddCardClick=this.onCloseAddCardClick.bind(this),this.onAddCardClick=this.onAddCardClick.bind(this),this.onremoveTaskClick=this.onremoveTaskClick.bind(this),this.onDragStart=this.onDragStart.bind(this),this.onDragDrop=this.onDragDrop.bind(this),this.onDragDropBlock=this.onDragDropBlock.bind(this)}render(){return`\n        <div class="tasks">\n            <h2>${this.title}</h2>\n            <ul class="task_list">\n            </ul>\n            <div class="new_card">\n                <button class="new_card_button" type="button">+ Add another card</button>\n            </div>\n            <div class="add_card hidden">\n                <textarea class="input" placeholder="Enter a title for this card..."></textarea>\n                <button class="btn_add" type="button">Add card</button>\n                <button class="btn_close" type="button">x</button>\n            </div>\n        </div>\n        `}static setCurrentTask(t){this.currentTask=t}static getCurrentTask(){return this.currentTask}static setCurrentBlock(t){this.currentBlock=t}static getCurrentBlock(){return this.currentBlock}bindToDOM(){const t=this.render();this.parentEl.insertAdjacentHTML("beforeend",t),this.dataFromLocalStorage(),this.addEvents();const e=this.parentEl.querySelector(".tasks");e.addEventListener("dragover",this.onDragOverBlock),e.addEventListener("dragleave",this.onDragLeaveBlock),e.addEventListener("dragend",this.onDragEndBlock),e.addEventListener("drop",this.onDragDropBlock)}onDragOverBlock(t){t.preventDefault(),t.target.closest(".tasks").style.boxShadow="0 4px 3px grey"}onDragLeaveBlock(t){t.target.closest(".tasks").style.boxShadow="none"}onDragEndBlock(t){t.target.closest(".tasks").style.boxShadow="none"}onDragDropBlock(e){if(e.preventDefault(),0!==this.tasks.length)return;const s=t.getCurrentTask().id,r=t.getCurrentTask().querySelector("span").innerText;this.tasks.push({id:s,text:r}),this.removeLocalStorage(),this.updateLocalStorage();const a=JSON.parse(localStorage.getItem(this.title));this.updateElementsDOM(a)}updateElementsDOM(t){t.forEach((t=>{const e=this.parentEl.querySelector(".task_list"),s=this.createTask(t.id,t.text);e.appendChild(s),s.querySelector(".remove_task").addEventListener("click",this.onremoveTaskClick);const r=document.getElementById(s.id);this.addDragDropEvents(r)}))}dataFromLocalStorage(){const t=this.parentEl.querySelector(".task_list");JSON.parse(localStorage.getItem(this.title))&&0!==JSON.parse(localStorage.getItem(this.title)).length&&JSON.parse(localStorage.getItem(this.title)).forEach((e=>{const s=this.createTask(e.id,e.text);t.appendChild(s),this.tasks.push({id:s.id,text:s.querySelector("span").innerText}),s.querySelector(".remove_task").addEventListener("click",this.onremoveTaskClick);const r=document.getElementById(s.id);this.addDragDropEvents(r)}))}addEvents(){this.newCardBtn=this.parentEl.querySelector(".new_card_button"),this.closeAddBlock=this.parentEl.querySelector(".btn_close"),this.addTask=this.parentEl.querySelector(".btn_add"),this.newCardBtn.addEventListener("click",this.onNewCardClick),this.closeAddBlock.addEventListener("click",this.onCloseAddCardClick),this.addTask.addEventListener("click",this.onAddCardClick)}addDragDropEvents(t){t.addEventListener("dragstart",this.onDragStart),t.addEventListener("dragend",this.onDragEnd),t.addEventListener("dragover",this.onDragOver),t.addEventListener("drop",this.onDragDrop),t.addEventListener("dragleave",this.onDragLeave)}onNewCardClick(){this.addCardBlock=this.parentEl.querySelector(".add_card"),this.newCardBlock=this.parentEl.querySelector(".new_card"),this.addCardBlock.classList.remove("hidden"),this.newCardBlock.classList.add("hidden")}onCloseAddCardClick(){this.parentEl.querySelector(".input").value="",this.addCardBlock.classList.add("hidden"),this.newCardBlock.classList.remove("hidden")}onAddCardClick(){const t=this.parentEl.querySelector(".task_list"),e=this.parentEl.querySelector(".input");if(!e.value.trim())return;const s=performance.now(),r=this.createTask(s,e.value);t.appendChild(r),this.tasks.push({id:r.id,text:r.querySelector("span").innerText}),this.updateLocalStorage(),e.value="",r.querySelector(".remove_task").addEventListener("click",this.onremoveTaskClick);const a=document.getElementById(s);this.addDragDropEvents(a)}onDragStart(e){this.tasks=this.tasks.filter((t=>e.target.id!==t.id)),t.setCurrentTask(e.target),t.setCurrentBlock(this.tasks),this.removeLocalStorage(),this.updateLocalStorage(),setTimeout((()=>{Array.from(this.parentEl.querySelectorAll(".task_item")).forEach((t=>t.remove()))}),0),setTimeout((()=>{const t=JSON.parse(localStorage.getItem(this.title));this.updateElementsDOM(t)}),100)}onDragEnd(t){t.target.style.boxShadow="none",t.target.classList.remove("hidden")}onDragOver(t){t.preventDefault(),t.target.classList.contains("task_item")&&(t.target.style.boxShadow="0 4px 3px grey")}onDragLeave(t){t.target.style.boxShadow="none"}onDragDrop(e){e.preventDefault();const s=t.getCurrentTask().id,r=t.getCurrentTask().querySelector("span").innerText,a=this.tasks.findIndex((t=>e.target.id===t.id));this.tasks.splice(a+1,0,{id:s,text:r}),Array.from(this.parentEl.querySelectorAll(".task_item")).forEach((t=>t.remove())),this.removeLocalStorage(),this.updateLocalStorage();const n=JSON.parse(localStorage.getItem(this.title));this.updateElementsDOM(n)}onremoveTaskClick(t){const e=t.currentTarget.closest(".task_item");this.tasks=this.tasks.filter((t=>e.id!==t.id)),e.remove(),this.removeLocalStorage(),this.updateLocalStorage()}createTask(t,e){const s=document.createElement("li");s.className="task_item",s.id=t,s.draggable=!0;const r=document.createElement("span");r.innerText=e;const a=document.createElement("button");return a.className="remove_task",a.innerText="x",s.appendChild(r),s.appendChild(a),s}updateLocalStorage(){localStorage.setItem(this.title,JSON.stringify(this.tasks))}removeLocalStorage(){localStorage.removeItem(this.title)}}const e=document.querySelector(".todo"),s=document.querySelector(".in-progress"),r=document.querySelector(".done");new t(e,"Todo").bindToDOM(),new t(s,"In Progress").bindToDOM(),new t(r,"Done").bindToDOM()})();